{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Skript Gym 1 Programmieren mit Python","text":""},{"location":"#inhalt","title":"Inhalt","text":"<ol> <li>Turtle</li> <li>Programmieren 1</li> <li>Programmieren 2</li> <li>How-To Guides</li> <li>Nachschlageseite</li> <li>Explanation</li> </ol>"},{"location":"reference/","title":"Nachschlageseite","text":""},{"location":"reference/#turtle-befehle","title":"Turtle-Befehle","text":"<ol> <li>Playground mit Turtle</li> </ol> <pre><code>from gturtle import *  # ganzes Modul importieren\n\njoe = Turtle()         # Turtle mit Namen joe erstellen\n# oder ...\nmakeTurtle()           # Turtle-Playground erstellen\n</code></pre> <ol> <li>Bewegung</li> </ol> <pre><code>joe.forward(100)    # Argument in Pixel\njoe.right(90)       # Argument in Grad\n</code></pre>"},{"location":"reference/#zufallszahlen","title":"Zufallszahlen","text":"<ol> <li>Import der Funktion <code>randint</code> aus dem Modul <code>random</code>:</li> </ol> <pre><code>from random import randint\n</code></pre> <ol> <li>Verwenden der <code>randint</code>-Funktion.</li> </ol> <pre><code>wuerfelzahl = randint(1, 6)\n\nzahlZwischen1und20 = randint(1, 20)\n</code></pre> <p>Hinweis: Das erste Argument der Funktion ist die kleinstm\u00f6gliche, das zweite die gr\u00f6sstm\u00f6gliche Zufallszahl, die zur\u00fcckgegeben werden kann.</p> <ol> <li>Beispiel: W\u00fcrfe z\u00e4hlen bis zur ersten Doppelsechs</li> </ol> <pre><code>from random import randint\nnumber = 0\nwhile True:\n    a = randint(1, 6)\n    b = randint(1, 6)\n    number += 1\n    if a == 6 and b == 6:\n        print(number)\n</code></pre>"},{"location":"reference/#mathematik","title":"Mathematik","text":"<p>Python bietet viele eingebaute Funktionen f\u00fcr mathematische Berechnungen. Hier sind einige wichtige Beispiele:</p> <pre><code># Addition\nergebnis = 2 + 3      # ergibt 5\n\n# Subtraktion\nergebnis = 5 - 2      # ergibt 3\n\n# Multiplikation\nergebnis = 4 * 3      # ergibt 12\n\n# Division\nergebnis = 10 / 2     # ergibt 5.0\n\n# Ganzzahlige Division (ohne Rest)\nergebnis = 10 // 3    # ergibt 3\n\n# Rest einer Division (Modulo)\nergebnis = 10 % 3     # ergibt 1\n\n# Potenz (hoch)\nergebnis = 2 ** 3     # ergibt 8\n</code></pre>"},{"location":"reference/#mathematische-funktionen-mit-dem-modul-math","title":"Mathematische Funktionen mit dem Modul <code>math</code>","text":"<p>F\u00fcr weitere mathematische Funktionen kann das Modul <code>math</code> verwendet werden:</p> <pre><code>import math\n\n# Quadratwurzel\nwurzel = math.sqrt(16)    # ergibt 4.0\n\n# Sinus (Winkel in Radian!)\nwert = math.sin(math.pi/2)  # ergibt 1.0\n\n# Absoluter Wert\nwert = abs(-5)            # ergibt 5\n\n# Runden\nwert = round(3.14159, 2)  # ergibt 3.14\n</code></pre> <p>Hinweis: F\u00fcr viele Funktionen im Modul <code>math</code> m\u00fcssen Winkel im Bogenma\u00df (Radian) angegeben werden, nicht in Grad.</p>"},{"location":"tutorial_prog1/","title":"Programmieren 1","text":""},{"location":"tutorial_prog1/#input-und-output","title":"Input und Output","text":"<p>Mit den Funktionen <code>input</code> resp. <code>print</code> k\u00f6nnen in einem Programm Werte vom Benutzer eingelesen (<code>input</code>) resp. Werte auf der Konsole ausgegeben (<code>print</code>) werden.</p> <ol> <li><code>input</code></li> </ol> <p>Beispielsweise m\u00f6chte man den Benutzer nach seinem Namen fragen. Dies kann mit der folgenden Code-Zeile erreicht werden:</p> <pre><code>name = input(\"Wie heisst Du?\")\n</code></pre> <p>Wichtig:</p> <ul> <li>Das Argument von <code>input</code> (der Wert in Klammern nach <code>input</code>) muss immer mit Anf\u00fchrungs- und Schlusszeichen geschrieben werden, es handelt sich um einen sogenannten String.</li> <li>Wenn der Benutzer auf die Aufforderung hin einen Namen eingibt (z.B. <code>Petra</code>), so ist anschliessend der Wert <code>'Petra'</code> auf der Variablen <code>name</code> gespeichert. Diesen Wert kann sp\u00e4ter unter <code>name</code> wieder abgefragt werden.</li> <li>Wenn man eine Zahl vom Benutzer abfragen m\u00f6chte (und nicht einen Namen oder anderen Text), so muss man vor dem Abspeichern den R\u00fcckgabewert von <code>input</code> noch in einen Integer (ganze Zahl) verwandeln. Dies kann man folgendermassen erreichen:</li> </ul> <pre><code>alter = int(input(\"Wie alt bist Du?\"))\n</code></pre> <p>Die <code>int</code>-Funktion wird eine Zahl, die eingegeben wurde, auch als Zahl (mit der man rechnen kann) abspeichern.</p> <ol> <li><code>print</code></li> </ol> <p>Wenn man in einem Programm Resultate berechnet hat und diese ausgeben m\u00f6chte, so kann man daf\u00fcr die Funktion <code>print</code> verwenden.</p> <p>In diesem ersten Beispiel soll das Produkt von zwei Zahlen, die vom Benutzer eingegeben werden k\u00f6nnen, berechnet und ausgegeben werden.</p> <pre><code>zahl1 = int(input(\"Wie heisst die erste Zahl?\"))\nzahl2 = int(input(\"Wie heisst die zweite Zahl?\"))\n\nprodukt = zahl1 * zahl2\nprint(\"Das Produkt lautet: \")\nprint(produkt)\n</code></pre> <p>Es gibt verschiedene M\u00f6glichkeiten, um Werte, die auf Variablen gespeichert sind, auszugeben. Eine einfache sind sogenannte f-Strings (formatierte Strings.) Die Variablen-Werte werden einfach in den ausgegebenen String eingebettet. Die letzten drei Zeilen kann man mit einem f-String einfacher schreiben als</p> <pre><code>produkt = zahl1 * zahl2\nprint(f\"Das Produkt lautet: {produkt}\")\n</code></pre> <p>Hinweise:</p> <ul> <li>Vor dem Anf\u00fchrungszeichen schreibt man den Buchstaben <code>f</code> um anzugeben, dass innerhalb des Strings auch Variablen vorkommen, deren Werte ersetzt werden m\u00fcssen.</li> <li>Innerhalb der Anf\u00fchrungszeichen kann man Variablen mit geschweiften Klammern ({}) setzen, deren Werte werden dann automatisch ersetzt.</li> </ul>"},{"location":"tutorial_prog2/","title":"Programmieren 2","text":""},{"location":"tutorial_turtle/","title":"Turtle Tutorial","text":""},{"location":"tutorial_turtle/#basics-der-turtle","title":"Basics der Turtle","text":"<ol> <li>Playground erstellen</li> </ol> <p>Mit dem folgenden Code importiert man das <code>gturtle</code>- Modul und erstellt eine Turtle, die unter dem Namen <code>jack</code> angesprochen werden kann.</p> <pre><code>from gturtle import *\njack = Turtle()\n</code></pre> <ol> <li> <p>Erstellen einer Turtle</p> </li> <li> <p>Mit den Befehlen <code>forward</code> resp. <code>back</code> kann eine Turtle nach vorne   (in Richtung von ihrem Kopf) oder nach hinten bewegt werden.</p> </li> <li>Mit den Befehlen <code>right()</code> resp. <code>left()</code> kann die Turtle um eine   bestimmte Anzahl Grad nach rechts oder nach links gedreht werden.</li> </ol> <pre><code>jack.forward(100)  # jack geht um 100 Pixel nach vorne\njack.left(90)      # ... und dreht sich um 90 Grad nach links\njack.back(50)\n</code></pre>"},{"location":"tutorial_turtle/#wiederholungen","title":"Wiederholungen","text":"<p>Mit einer <code>for</code>-Anweisung kann ein bestimmter Code-Block so oft wiederholt werden, wie man m\u00f6chte. Das dient vor allem der Lesbarkeit des Codes und dazu, dass man keine Zeilen wiederholt schreiben muss.</p> <p>Beispiel: Damit die Turtle <code>mary</code> ein Quadrat mit Seitel\u00e4nge $100$ zeichnet, kann man den folgenden Code schreiben:</p> <pre><code>mary.forward(100)\nmary.right(90)\nmary.forward(100)\nmary.right(90)\nmary.forward(100)\nmary.right(90)\nmary.forward(100)\nmary.right(90)\n</code></pre> <p>Dabei werden die ersten zwei Zeilen je 4 Mal wiederholt. Nun kommt die <code>for</code>-Schleife ins Spiel. Damit lautet derselbe Code wie folgt:</p> <pre><code>for _ in range(4):      # alles was unten einger\u00fcckt ist, soll 4 Mal wiederholt werden.\n    mary.forward(100)\n    mary.right(90)\n</code></pre>"},{"location":"tutorial_turtle/#position-anpassen","title":"Position anpassen","text":"<p>Die Turtle kann mit <code>setPos(x, y)</code> auf eine bestimmte Position des Koordinatensystems gesetzt werden.</p> <pre><code>mary.setPos(100, 50) # mary wird auf (100, 50) gesetzt, ohne eine Spur zu hinterlassen\n</code></pre>"}]}